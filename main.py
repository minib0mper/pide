import asyncio
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7463462122:AAEJFKA-ICGqGtTaW366-vcIyv6e094wYAk"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
Money = 0
money = 0
lang = 0
num = 0
new_text = None
sent_message = None
text = None
delete_text = None
new_text = None
keyboard = None

types = [
    "lox", "loxx", "balic", "earn", "menu"
]

async def langu(update, user_id, query, chat_id, message_id, sent_message, text, context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ."""
    with open('data.txt', 'r', encoding='ISO-8859-1') as file:
        lines = file.readlines()
        id_found = False
        for line in lines:
            if line.startswith(str(user_id)):
                parts = line.split()
                if len(parts) >= 2:
                    number = parts[1]
                    id_found = True
                    await menuu(query, chat_id, message_id, sent_message, text, context)
                    break
        if not id_found:
            await update.message.reply_text("–í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

async def data(user_id, money):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª data.txt."""
    try:
        file_path = 'data.txt'
        lines = []
        try:
            with open(file_path, 'r', encoding='ISO-8859-1') as file:
                lines = file.readlines()
        except FileNotFoundError:
            pass

        id_found = False
        for i in range(len(lines)):
            if lines[i].startswith(str(user_id)):
                lines[i] = f"{user_id} {money}\n"
                id_found = True
                break

        if not id_found:
            lines.append(f"{user_id} {money}\n")

        with open(file_path, 'w', encoding='ISO-8859-1') as file:
            file.writelines(lines)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º: {e}")

def log_visit(user_id, username):
    """ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. """
    visit_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"{visit_time} - User ID: {user_id}, Username: {username}"

    try:
        with open("loxi.txt", "r", encoding='ISO-8859-1') as f:
            for line in f:
                if f"User ID: {user_id}" in line:
                    return
    except FileNotFoundError:
        pass

    with open("loxi.txt", "a", encoding='ISO-8859-1') as f:
        f.write(log_entry + "\n")

async def menuu(query, chat_id, message_id, sent_message, text, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id,
        text="üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!\n\n–•–æ—á–µ—à—å –ª–µ–≥–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏? –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è. üí∞\n\n"
             "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ –≤ Telegram:\nüîπ **–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è** –∏ –ø–æ–ª—É—á–∞–π –¥–µ–Ω—å–≥–∏ —Å—Ä–∞–∑—É.\nüîπ **–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π** –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π **$1** –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–º—ë—Ç 'start'. üíµ\n"
             "üîπ **–í—ã–≤–æ–¥–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üî•\n\nü§î *–ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?*\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ Telegram-–∫–∞–Ω–∞–ª—ã –ø–ª–∞—Ç—è—Ç –Ω–∞–º –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∞ –º—ã –¥–µ–ª–∏–º—Å—è –ø—Ä–∏–±—ã–ª—å—é —Å —Ç–æ–±–æ–π. –≠—Ç–æ –≤—ã–≥–æ–¥–Ω–æ –≤—Å–µ–º!üìàüìà\n\n–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ —Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–≤–æ–π –¥–æ—Ö–æ–¥! üöÄ"
    )
    await menu(query, chat_id, message_id, sent_message, text, context)

async def menu(query, chat_id, message_id, sent_message, update, context: ContextTypes.DEFAULT_TYPE):
    global num, new_text
    keyboard = [
        [InlineKeyboardButton("–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!üî•", callback_data="earn")],
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Åüí∞", callback_data="balic")],
        [InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞üë•", callback_data="lox")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if num == 1:
        await change_message(query, chat_id, message_id, sent_message, "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!üìã", context)
        num = 0
    else:
        if update and update.message:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!üìã", reply_markup=reply_markup)
        elif query and hasattr(query, "message"):
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!üìã", reply_markup=reply_markup)
        elif chat_id:
            await context.bot.send_message(
                chat_id=chat_id, text="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!üìã", reply_markup=reply_markup
            )
        num = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global num
    global Money, money
    user_id = update.effective_user.id
    chat_id = update.message.chat_id if update.message else None
    message_id = update.message.message_id if update.message else None

    money = 0
    username = update.effective_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_visit(user_id, username)
    await data(user_id, money)

    num = 0

    # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ langu
    await langu(update, user_id, None, chat_id, message_id, None, None, context)

async def change_message(query, chat_id, message_id, sent_message, text, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!üî•", callback_data="earn")],
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Åüí∞", callback_data="balic")],
        [InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞üë•", callback_data="lox")]
    ]

    # –°–æ–∑–¥–∞–µ–º reply_markup —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ callback_data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤
    types = ["earn", "balic", "lox", "menu"]
    reply_markup = InlineKeyboardMarkup(keyboard) if query and query.data in types else None

    if query and query.message:
        if reply_markup:
            await query.message.edit_text(text, reply_markup=reply_markup)
        else:
            await query.message.edit_text(text)
    elif chat_id:
        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç `query` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç message, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id, text=text, reply_markup=reply_markup
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    global Money, money, new_text, keyboard
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    message_id = query.message.message_id

    if query.data == "menu":
        global num
        num = 1
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!üî•", callback_data="earn")],
            [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Åüí∞", callback_data="balic")],
            [InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞üë•", callback_data="lox")]
        ]   
        new_text = "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!üìã"
    elif query.data == "earn":
        await data(user_id, money)
        if money == 0:
            link = 'https://t.me/+_PslAnpWv5owY2Uy'
            money += 1
            Money = '1$'
            keyboard = [
                [InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", callback_data=f"{link}")],
                [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüíº", callback_data="menu")]
            ]
            await data(user_id, money)
        elif money == 1:
            link = 'https://t.me/+PT9OOK_m7FI1YWQy'
            money += 1
            Money = '2$'
            keyboard = [
                [InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", callback_data=f"{link}")],
                [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüíº", callback_data="menu")]
            ]
            await data(user_id, money)
        elif money == 2:
            link = 'https://t.me/+hOfy2MT0X8JjNzE6'
            money += 1
            Money = '3$'
            keyboard = [
                [InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", callback_data=f"{link}")],
                [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüíº", callback_data="menu")]
            ]
            await data(user_id, money)
        elif money == 3:
            link = '–°—Å—ã–ª–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–∏—Ç–µ'
            money = 0
        keyboard = [
            [InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", callback_data=f"{link}")],
            [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüíº", callback_data="menu")]
        ]
        new_text = "–ü–æ–¥–ø–∏—à–∏—Å—å –¥–ª—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è!üìàüìà"
    elif query.data == "balic":
        await data(user_id, money)
        keyboard = [
            [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüíº", callback_data="menu")],
            [InlineKeyboardButton(f"–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏üí≥", callback_data="loxx")]
        ]
        new_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {Money}"
    elif query.data == "loxx":
        keyboard = [
            [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüíº", callback_data="menu")],
            [InlineKeyboardButton(f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞üë¨", callback_data="lox")]
        ]
        new_text = "–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:"
    elif query.data == "lox":
        keyboard = [
            [InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüíº", callback_data="menu")],
            [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"@EZPAY9_bot")]
        ]
        new_text = "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É\n @EZPAY9_bot"

    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=new_text,
        reply_markup=InlineKeyboardMarkup(keyboard) if query.data in types else None
    )

async def users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open('loxi.txt', 'r', encoding='ISO-8859-1') as file:
            lines = file.readlines()
            line_count = len(lines)

        await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {line_count}")
    except FileNotFoundError:
        await update.message.reply_text("–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("users", users))
    application.add_handler(CallbackQueryHandler(button_callback))

    application.run_polling()

if __name__ == "__main__":
    main()
